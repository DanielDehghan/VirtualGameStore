// <auto-generated />
using System;
using ConestogaVirtualGameStore.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConestogaVirtualGameStore.Migrations
{
    [DbContext(typeof(VirtualGameStoreContext))]
    [Migration("20241110002936_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Address = "108 University Ave E",
                            City = "Waterloo",
                            Country = "Canada",
                            Date = new DateTime(2024, 12, 15, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "A meetup event with the Conestoga Esports team and their fans",
                            Name = "Conestoga Esports Meetup",
                            PostalCode = "N2J 2W2",
                            Province = "Ontario"
                        },
                        new
                        {
                            EventId = 2,
                            Address = "299 Doon Valley Dr",
                            City = "Kitchener",
                            Country = "Canada",
                            Date = new DateTime(2024, 12, 18, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A retro game sale with many popular and beloved classic games",
                            Name = "Conestoga Retro Game Sale",
                            PostalCode = "N2G 4M4",
                            Province = "Ontario"
                        },
                        new
                        {
                            EventId = 3,
                            Address = "775 Main Street East",
                            City = "Milton",
                            Country = "Canada",
                            Date = new DateTime(2024, 12, 20, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A game convention with sales, fan-favourite game actors, and sneak peak on new game releases on the Conestoga Video Game Store website",
                            Name = "Conestoga Gaming Convention",
                            PostalCode = "L9T 3Z3",
                            Province = "Ontario"
                        },
                        new
                        {
                            EventId = 4,
                            Address = "850 Fountain Street South",
                            City = "Cambridge",
                            Country = "Canada",
                            Date = new DateTime(2024, 12, 28, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A game tournament that has competitors facing each other in various fighting and fps games to win a cash prize",
                            Name = "Conestoga Gaming Tournament",
                            PostalCode = "N3H 0A8",
                            Province = "Ontario"
                        });
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<string>("CoverImageURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Genere")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GameId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            CoverImageURL = "https://image.api.playstation.com/vulcan/ap/rnd/202208/1718/NFf86jgU4AeVYgJBEoEKBpxW.jpg",
                            Description = "An action RPG set in a historical setting, featuring stealth and combat elements.",
                            Genere = "Action RPG",
                            Platform = "PlayStation 5, Xbox Series X/S, PC",
                            Price = 59.99m,
                            ReleaseDate = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Assassin's Creed Mirage"
                        },
                        new
                        {
                            GameId = 2,
                            CoverImageURL = "https://cdn2.steamgriddb.com/grid/3c8907c9dc26266603441dcb03dbe620.png",
                            Description = "The latest installment in the Call of Duty series, offering intense first-person shooter action.",
                            Genere = "First-Person Shooter",
                            Platform = "PlayStation 5, Xbox Series X/S, PC",
                            Price = 69.99m,
                            ReleaseDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Call of Duty MW3"
                        },
                        new
                        {
                            GameId = 3,
                            CoverImageURL = "https://upload.wikimedia.org/wikipedia/en/9/9f/Cyberpunk_2077_box_art.jpg",
                            Description = "A futuristic open-world RPG set in the dystopian Night City, filled with cybernetic enhancements and complex narratives.",
                            Genere = "Action RPG",
                            Platform = "PlayStation 4, PlayStation 5, Xbox One, Xbox Series X/S, PC",
                            Price = 39.99m,
                            ReleaseDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cyberpunk 2077"
                        },
                        new
                        {
                            GameId = 4,
                            CoverImageURL = "https://image.api.playstation.com/vulcan/ap/rnd/202207/1210/4xJ8XB3bi888QTLZYdl7Oi0s.png",
                            Description = "An epic sequel to the critically acclaimed God of War, featuring Norse mythology and Kratos' journey.",
                            Genere = "Action-Adventure",
                            Platform = "PlayStation 4, PlayStation 5",
                            Price = 69.99m,
                            ReleaseDate = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "God of War Ragnarok"
                        },
                        new
                        {
                            GameId = 5,
                            CoverImageURL = "https://upload.wikimedia.org/wikipedia/en/d/df/Resident_Evil_4_remake_cover_art.jpg",
                            Description = "A modern remake of the classic survival horror game, offering updated graphics and gameplay mechanics.",
                            Genere = "Survival Horror",
                            Platform = "PlayStation 4, PlayStation 5, Xbox Series X/S, PC",
                            Price = 59.99m,
                            ReleaseDate = new DateTime(2023, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Resident Evil 4 Remake"
                        },
                        new
                        {
                            GameId = 6,
                            CoverImageURL = "https://image.api.playstation.com/vulcan/ap/rnd/202312/0117/315718bce7eed62e3cf3fb02d61b81ff1782d6b6cf850fa4.png",
                            Description = "A narrative-driven action-adventure game that continues the story of Ellie and Joel in a post-apocalyptic world.",
                            Genere = "Action-Adventure",
                            Platform = "PlayStation 4",
                            Price = 59.99m,
                            ReleaseDate = new DateTime(2020, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Last of Us: Part 2"
                        });
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Member", b =>
                {
                    b.Property<int>("Member_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Member_ID"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Cart_ID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Language_ID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone_Number")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Postal_Code")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Province")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Register_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Member_ID");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Member_ID = 1,
                            Address = "123 Main St",
                            City = "New York",
                            Country = "USA",
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "password123",
                            Phone_Number = "555-1234",
                            Postal_Code = "10001",
                            Province = "NY",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5151)
                        },
                        new
                        {
                            Member_ID = 2,
                            Address = "456 Elm St",
                            City = "Toronto",
                            Country = "Canada",
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "password456",
                            Phone_Number = "555-5678",
                            Postal_Code = "M5H 2N2",
                            Province = "ON",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5189)
                        },
                        new
                        {
                            Member_ID = 3,
                            Address = "123 Maple St",
                            City = "New York",
                            Country = "USA",
                            Email = "amelia.hawke@example.com",
                            FirstName = "Amelia",
                            LastName = "Hawke",
                            Password = "password123",
                            Phone_Number = "555-1234",
                            Postal_Code = "10001",
                            Province = "NY",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5192)
                        },
                        new
                        {
                            Member_ID = 4,
                            Address = "456 Oak St",
                            City = "Vancouver",
                            Country = "Canada",
                            Email = "leo.montgomery@example.com",
                            FirstName = "Leo",
                            LastName = "Montgomery",
                            Password = "password234",
                            Phone_Number = "555-2345",
                            Postal_Code = "V6B 3A2",
                            Province = "BC",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5195)
                        },
                        new
                        {
                            Member_ID = 5,
                            Address = "789 Pine St",
                            City = "London",
                            Country = "UK",
                            Email = "clara.fitzgerald@example.com",
                            FirstName = "Clara",
                            LastName = "Fitzgerald",
                            Password = "password345",
                            Phone_Number = "555-3456",
                            Postal_Code = "EC1A 1BB",
                            Province = "England",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5198)
                        },
                        new
                        {
                            Member_ID = 6,
                            Address = "101 Birch St",
                            City = "Los Angeles",
                            Country = "USA",
                            Email = "ethan.rivers@example.com",
                            FirstName = "Ethan",
                            LastName = "Rivers",
                            Password = "password456",
                            Phone_Number = "555-4567",
                            Postal_Code = "90001",
                            Province = "CA",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5200)
                        },
                        new
                        {
                            Member_ID = 7,
                            Address = "202 Cedar St",
                            City = "Sydney",
                            Country = "Australia",
                            Email = "sofia.langford@example.com",
                            FirstName = "Sofia",
                            LastName = "Langford",
                            Password = "password567",
                            Phone_Number = "555-5678",
                            Postal_Code = "2000",
                            Province = "NSW",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5203)
                        },
                        new
                        {
                            Member_ID = 8,
                            Address = "303 Willow St",
                            City = "Chicago",
                            Country = "USA",
                            Email = "jackson.mercer@example.com",
                            FirstName = "Jackson",
                            LastName = "Mercer",
                            Password = "password678",
                            Phone_Number = "555-6789",
                            Postal_Code = "60601",
                            Province = "IL",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5205)
                        },
                        new
                        {
                            Member_ID = 9,
                            Address = "404 Elm St",
                            City = "Montreal",
                            Country = "Canada",
                            Email = "ava.kensington@example.com",
                            FirstName = "Ava",
                            LastName = "Kensington",
                            Password = "password789",
                            Phone_Number = "555-7890",
                            Postal_Code = "H3B 2A7",
                            Province = "QC",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5208)
                        },
                        new
                        {
                            Member_ID = 10,
                            Address = "505 Pine St",
                            City = "Manchester",
                            Country = "UK",
                            Email = "oliver.stanton@example.com",
                            FirstName = "Oliver",
                            LastName = "Stanton",
                            Password = "password890",
                            Phone_Number = "555-8901",
                            Postal_Code = "M1 1AE",
                            Province = "England",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5211)
                        },
                        new
                        {
                            Member_ID = 11,
                            Address = "606 Oak St",
                            City = "Melbourne",
                            Country = "Australia",
                            Email = "isabella.drake@example.com",
                            FirstName = "Isabella",
                            LastName = "Drake",
                            Password = "password901",
                            Phone_Number = "555-9012",
                            Postal_Code = "3000",
                            Province = "VIC",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5213)
                        },
                        new
                        {
                            Member_ID = 12,
                            Address = "707 Maple St",
                            City = "San Francisco",
                            Country = "USA",
                            Email = "mason.carlisle@example.com",
                            FirstName = "Mason",
                            LastName = "Carlisle",
                            Password = "password012",
                            Phone_Number = "555-0123",
                            Postal_Code = "94101",
                            Province = "CA",
                            Register_Date = new DateTime(2024, 11, 9, 19, 29, 36, 723, DateTimeKind.Local).AddTicks(5216)
                        });
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.MemberEvent", b =>
                {
                    b.Property<int>("MemberEvent_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberEvent_ID"));

                    b.Property<int>("Event_ID")
                        .HasColumnType("int");

                    b.Property<int>("Member_ID")
                        .HasColumnType("int");

                    b.HasKey("MemberEvent_ID");

                    b.ToTable("MembersEvents");
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.MemberRelationship", b =>
                {
                    b.Property<int>("MemberRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberRelationshipId"));

                    b.Property<int>("MemberAdded_ID")
                        .HasColumnType("int");

                    b.Property<int>("Member_ID")
                        .HasColumnType("int");

                    b.Property<int>("Relationship_ID")
                        .HasColumnType("int");

                    b.HasKey("MemberRelationshipId");

                    b.HasIndex("MemberAdded_ID");

                    b.HasIndex("Member_ID");

                    b.HasIndex("Relationship_ID");

                    b.ToTable("MembersRelationships");
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Relationship", b =>
                {
                    b.Property<int>("Relationship_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Relationship_ID"));

                    b.Property<string>("Relationship_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Relationship_ID");

                    b.ToTable("Relationships");

                    b.HasData(
                        new
                        {
                            Relationship_ID = 1,
                            Relationship_Type = "Friend"
                        },
                        new
                        {
                            Relationship_ID = 2,
                            Relationship_Type = "Family"
                        });
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Wishlist", b =>
                {
                    b.Property<int>("Wishlist_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Wishlist_ID"));

                    b.Property<int>("Member_ID")
                        .HasColumnType("int");

                    b.Property<string>("Wishlist_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Wishlist_ID");

                    b.HasIndex("Member_ID");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Wishlist_Games", b =>
                {
                    b.Property<int>("Wishlist_ID")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("Wishlist_ID", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("Wishlist_Games");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.MemberRelationship", b =>
                {
                    b.HasOne("ConestogaVirtualGameStore.Models.Member", "MemberAdded")
                        .WithMany("MemberRelationshipRelated")
                        .HasForeignKey("MemberAdded_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConestogaVirtualGameStore.Models.Member", "Member")
                        .WithMany("MemberRelationshipPrimary")
                        .HasForeignKey("Member_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConestogaVirtualGameStore.Models.Relationship", "Relationship")
                        .WithMany("MemberRelationship")
                        .HasForeignKey("Relationship_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MemberAdded");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Wishlist", b =>
                {
                    b.HasOne("ConestogaVirtualGameStore.Models.Member", "Member")
                        .WithMany("Wishlists")
                        .HasForeignKey("Member_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Wishlist_Games", b =>
                {
                    b.HasOne("ConestogaVirtualGameStore.Models.Game", "Game")
                        .WithMany("Wishlist_Games")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConestogaVirtualGameStore.Models.Wishlist", "Wishlist")
                        .WithMany("Wishlist_Games")
                        .HasForeignKey("Wishlist_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConestogaVirtualGameStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConestogaVirtualGameStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConestogaVirtualGameStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConestogaVirtualGameStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Game", b =>
                {
                    b.Navigation("Wishlist_Games");
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Member", b =>
                {
                    b.Navigation("MemberRelationshipPrimary");

                    b.Navigation("MemberRelationshipRelated");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Relationship", b =>
                {
                    b.Navigation("MemberRelationship");
                });

            modelBuilder.Entity("ConestogaVirtualGameStore.Models.Wishlist", b =>
                {
                    b.Navigation("Wishlist_Games");
                });
#pragma warning restore 612, 618
        }
    }
}
